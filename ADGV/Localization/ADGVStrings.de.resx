<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cancelbutton_text" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="cancelfiltermenuitem_text" xml:space="preserve">
    <value>Filter löschen</value>
  </data>
  <data name="cancelsortmenuitem_text" xml:space="preserve">
    <value>Sortieren abbrechen</value>
  </data>
  <data name="checknodetree_hour" xml:space="preserve">
    <value>h</value>
  </data>
  <data name="checknodetree_millisecond" xml:space="preserve">
    <value>ms</value>
  </data>
  <data name="checknodetree_minute" xml:space="preserve">
    <value>m</value>
  </data>
  <data name="checknodetree_second" xml:space="preserve">
    <value>s</value>
  </data>
  <data name="filtersmenuitem_text_datetime" xml:space="preserve">
    <value>Datum Filter</value>
  </data>
  <data name="filtersmenuitem_text_numeric" xml:space="preserve">
    <value>Nummer Filter</value>
  </data>
  <data name="filtersmenuitem_text_text" xml:space="preserve">
    <value>Text Filter</value>
  </data>
  <data name="month1" xml:space="preserve">
    <value>Januar</value>
  </data>
  <data name="month10" xml:space="preserve">
    <value>Oktober</value>
  </data>
  <data name="month11" xml:space="preserve">
    <value>November</value>
  </data>
  <data name="month12" xml:space="preserve">
    <value>Dezember</value>
  </data>
  <data name="month2" xml:space="preserve">
    <value>Februar</value>
  </data>
  <data name="month3" xml:space="preserve">
    <value>März</value>
  </data>
  <data name="month4" xml:space="preserve">
    <value>April</value>
  </data>
  <data name="month5" xml:space="preserve">
    <value>Mai</value>
  </data>
  <data name="month6" xml:space="preserve">
    <value>Juni</value>
  </data>
  <data name="month7" xml:space="preserve">
    <value>Juli</value>
  </data>
  <data name="month8" xml:space="preserve">
    <value>August</value>
  </data>
  <data name="month9" xml:space="preserve">
    <value>September</value>
  </data>
  <data name="okbutton_text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="setfilterform_andlabel_text" xml:space="preserve">
    <value>und</value>
  </data>
  <data name="setfilterform_cancelbutton_text" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="setfilterform_columnnamelabel_text" xml:space="preserve">
    <value>Zeige Zeilen mit Wert</value>
  </data>
  <data name="setfilterform_errorprovider_value" xml:space="preserve">
    <value>Ungültiger Wert</value>
  </data>
  <data name="setfilterform_filtertypecombobox_after" xml:space="preserve">
    <value>später als</value>
  </data>
  <data name="setfilterform_filtertypecombobox_before" xml:space="preserve">
    <value>früher als</value>
  </data>
  <data name="setfilterform_filtertypecombobox_begins" xml:space="preserve">
    <value>beginnt mit</value>
  </data>
  <data name="setfilterform_filtertypecombobox_between" xml:space="preserve">
    <value>zwischen</value>
  </data>
  <data name="setfilterform_filtertypecombobox_contain" xml:space="preserve">
    <value>enthält</value>
  </data>
  <data name="setfilterform_filtertypecombobox_ends" xml:space="preserve">
    <value>endet mit</value>
  </data>
  <data name="setfilterform_filtertypecombobox_equal" xml:space="preserve">
    <value>gleich wie</value>
  </data>
  <data name="setfilterform_filtertypecombobox_lagerequals" xml:space="preserve">
    <value>größer oder gleich als</value>
  </data>
  <data name="setfilterform_filtertypecombobox_larger" xml:space="preserve">
    <value>größer als</value>
  </data>
  <data name="setfilterform_filtertypecombobox_less" xml:space="preserve">
    <value>kleiner als</value>
  </data>
  <data name="setfilterform_filtertypecombobox_lessequals" xml:space="preserve">
    <value>kleiner oder gleich als</value>
  </data>
  <data name="setfilterform_filtertypecombobox_nobegins" xml:space="preserve">
    <value>beginnt nicht mit</value>
  </data>
  <data name="setfilterform_filtertypecombobox_nocontain" xml:space="preserve">
    <value>beinhaltet nicht</value>
  </data>
  <data name="setfilterform_filtertypecombobox_noends" xml:space="preserve">
    <value>endet nicht mit</value>
  </data>
  <data name="setfilterform_filtertypecombobox_notequal" xml:space="preserve">
    <value>ist nicht gleich</value>
  </data>
  <data name="setfilterform_okbutton_text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="setfilterform_text" xml:space="preserve">
    <value>Setze Filter</value>
  </data>
  <data name="setfilterform_viewfilterstring_and" xml:space="preserve">
    <value>und</value>
  </data>
  <data name="setfilterform_viewfilterstring_mustbe" xml:space="preserve">
    <value>Zeige Zeilen mit Wert</value>
  </data>
  <data name="setupfiltermenuitem_text" xml:space="preserve">
    <value>Benutzerdefiniert</value>
  </data>
  <data name="sortascmenuitem_text_boolean" xml:space="preserve">
    <value>Sortiere nach Falsch/Richtig</value>
  </data>
  <data name="sortascmenuitem_text_datetime" xml:space="preserve">
    <value>Sortiere von alt nach neu</value>
  </data>
  <data name="sortascmenuitem_text_numeric" xml:space="preserve">
    <value>Sortiere von klein nach groß</value>
  </data>
  <data name="sortascmenuitem_text_text" xml:space="preserve">
    <value>Sortiere von A nach Z</value>
  </data>
  <data name="sortdescmenuitem_text" xml:space="preserve">
    <value>Sortiere von Z nach A</value>
  </data>
  <data name="sortdescmenuitem_text_boolean" xml:space="preserve">
    <value>Sortiere nach Richtig/Falsch</value>
  </data>
  <data name="sortdescmenuitem_text_datetime" xml:space="preserve">
    <value>Sortiere von neu nach alt</value>
  </data>
  <data name="sortdescmenuitem_text_numeric" xml:space="preserve">
    <value>Sortiere von groß nach klein</value>
  </data>
  <data name="tripletreenode_allnode_text" xml:space="preserve">
    <value>(alles auswählen)</value>
  </data>
  <data name="tripletreenode_boolean_false" xml:space="preserve">
    <value>Falsch</value>
  </data>
  <data name="tripletreenode_boolean_true" xml:space="preserve">
    <value>Richtig</value>
  </data>
  <data name="tripletreenode_nullnode_text" xml:space="preserve">
    <value>(leer)</value>
  </data>
</root>